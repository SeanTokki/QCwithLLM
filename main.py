from dotenv import load_dotenv
import os
import asyncio
from tqdm import tqdm

from scoring.pipeline import run_full_pipeline, make_full_result
from scoring.graphs.category_graph import build_graph as build_cat_graph
from scoring.graphs.image_graph import build_graph as build_img_graph
from scoring.graphs.additional_graph import build_graph as build_add_graph
from db import get_store, save_score

async def main(request_ids):
    load_dotenv(dotenv_path=".env")
    os.environ["GOOGLE_API_KEY"] = os.getenv("GOOGLE_API_KEY")
    
    # 그래프 빌드
    graphs = {}
    graphs["cat"] = await asyncio.to_thread(build_cat_graph)
    graphs["img"] = await asyncio.to_thread(build_img_graph)
    graphs["add"] = await asyncio.to_thread(build_add_graph)
    
    for naver_id in tqdm(request_ids, desc="scoring", unit="store"):
        store = get_store(naver_id)
        result = await run_full_pipeline(graphs, store)
        full_result = make_full_result(naver_id, result)
        if full_result:
            save_score(naver_id, full_result.model_dump())
        else:
            print(f"[{naver_id}] scoring failed.")


if __name__ == "__main__":
    # 검수자 분들께 요청드렸던 전체 매장 목록
    # request_ids = ["1312258541", "11679381", "1365054072", "1730142162", "1371876716", "1751991640", "1517487358", "1729346749", 
    #                "1789793457", "1875023937", "1704335002", "2069798395", "11856990", "247810366", "1753238133", "1555088233", 
    #                "1469921031", "1200031483", "1240503952", "1647968724", "1165436888", "1336731916", "1247085253", "1684619726", 
    #                "1689266518", "13015562", "1270894354", "1003545719", "1937156788", "1627625590", "1047361327", "1897381601", 
    #                "1259930451", "1660575874", "1681547627", "1224384502", "1550229480", "1130667388", "1883490486", "1060664440", 
    #                "37864806", "1876571985", "1508243090", "1747158250", "1770977158", "1689555137", "1130497590", "768688023", 
    #                "11700226", "1068354679", "1185221694", "11678773", "1443081237", "1335290092", "140139147", "1046469739", 
    #                "1124710522", "1057884253", "1445744498", "1370341094", "1693891987", "1830163153", "1127705304", "1256999271", 
    #                "1866031034", "1463841684", "1804004435", "1285186695", "1281708874", "1642486910", "1942663107", "34582227", 
    #                "1713855997", "1935471901", "1499358207", "1047144456", "2092510977", "1250235967", "1647032458", "1053282197", 
    #                "1233920777", "1729155274", "1958568498", "1030835435", "1138672724", "1937294388", "1763662575", "1560084869", 
    #                "1802962451", "1739105800", "20597120", "1063104133", "35532762", "1729106110", "1463608577", "1174718905", 
    #                "1971705948", "1140019690", "1557683010", "11718044", "1720089249", "1328581940", "1603381706", "1987157240", 
    #                "1411713405", "1342487435", "1861187627", "1818437557", "1655389142", "1028527870", "1385833969", "1977658488", 
    #                "1122500485", "1688454165", "1992522130", "1677955576", "1792530692", "1873613500", "1117848167", "1340743361", 
    #                "1124361834", "2025345487", "1450319011", "1020595480"]
    # 현재까지 완료된 매장 목록
    # request_ids = ["1312258541", "11679381", "1365054072", "1730142162", "1371876716", "1751991640", "1517487358", 
    #                "1875023937", "1627625590", "1047361327", "1897381601", "1259930451", "1660575874", "140139147", 
    #                "1124710522", "1411713405", "1342487435", "1861187627", "1818437557", "1655389142", "1028527870", "1385833969", 
    #                "1122500485", "1688454165", "1992522130", "1677955576", "1792530692", "1873613500", "1117848167",
    #                "1340743361", "1124361834", "2025345487", "1450319011", "1020595480", "1681547627", "1224384502", "1550229480",
    #                "1130667388", "1883490486", "1060664440", "37864806", "1876571985", "1508243090", "1747158250", "1789793457"]
    # few-shot으로 사용해서 제외한 매장 목록
    request_ids = ["1729346749", "1977658488"]
    
    asyncio.run(main(request_ids))

